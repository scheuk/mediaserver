---
- hosts: all
  remote_user: scheuk
  become: yes

  tasks:
  # run once to install python for ansible
  #- name: "Install python2 and python-simplejson"
  #  raw: "apt-get update && apt-get install -y python2.7 python-simplejson"

  - name: Install packages
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - python-setuptools
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common

  - name: Install pip
    easy_install: name=pip

  - name: Install docker python library
    pip: name=docker state=latest


  - name: Add docker gpg key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg

  - name: Add docker apt repository
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"

  - name: Install docker
    apt:
      name: docker-ce
      state: latest
      update_cache: yes

  - name: "Launch heimdall container"
    docker_container:
      name: heimdall
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/heimdall
      ports:
        - "80:80"
        - "443:443"
      env:
        TZ: America/New_York
      volumes:
        - "heimdall-config:/config"

  - name: "Launch sonarr container"
    docker_container:
      name: sonarr
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/sonarr
      ports:
        - "8989:8989"
      env:
        PUID: 110
        PGID: 117
      volumes:
        - "sonarr-config:/config"
        - "/etc/localtime:/etc/localtime:ro"
        - "/tank1/Media/TV\ Shows:/tv"
        - "/tank1/Media/downloads:/downloads"

  - name: "Launch radarr container"
    docker_container:
      name: radarr
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/radarr
      ports:
        - "7878:7878"
      env:
        PUID: 110
        PGID: 117
      volumes:
        - "radarr-config:/config"
        - "/etc/localtime:/etc/localtime:ro"
        - "/tank1/Media/Movies:/movies"
        - "/tank1/Media/downloads:/downloads"

  - name: "Launch jackett container"
    docker_container:
      name: jackett
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/jackett
      ports:
        - "9117:9117"
      env:
        PUID: 110
        PGID: 117
      volumes:
        - "jackett-config:/config"
        - "jackett-downloads:/downloads"
        - "/etc/localtime:/etc/localtime:ro"

  - name: "Launch deluge container"
    docker_container:
      name: deluge
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/deluge
      network_mode: host
      env:
        PUID: 110
        PGID: 117
      volumes:
        - "deluge-config:/config"
        - "/tank1/Media/downloads:/downloads"

  - name: "Launch plex container"
    docker_container:
      name: plex
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/plex
      network_mode: host
      env:
        PUID: 110
        PGID: 117
        VERSION: public
        TZ: America/New_York
      volumes:
        - "/var/lib/plexmediaserver:/config"
        - "/tank1/Media:/tank1/Media"

  - name: "Launch prometheus container"
    docker_container:
      name: prometheus
      state: started
      pull: true
      restart_policy: unless-stopped
      image: prom/prometheus
      ports:
        - "9090:9090"
      volumes:
        - "/etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
        - "prometheus-data:/prometheus"

  - name: "Launch grafana container"
    docker_container:
      name: grafana
      state: started
      pull: true
      restart_policy: unless-stopped
      image: grafana/grafana
      ports:
        - "3000:3000"
      volumes:
        - "grafana-data:/var/lib/grafana"

  - name: "Launch unifi controller container"
    docker_container:
      name: unifi
      state: started
      pull: true
      restart_policy: unless-stopped
      image: linuxserver/unifi
      ports:
        - "3478:3478/udp"
        - "10001:10001/udp"
        - "8080:8080"
        - "8081:8081"
        - "8443:8443"
        - "8843:8843"
        - "8880:8880"
        - "6789:6789"
      env:
        PUID: 110
        PGID: 117
      volumes:
        - "unifi-config:/config"

# still need to configure:
# docker network create -d macvlan --subnet=192.168.1.0/24 --ip-range=192.168.1.16/28 --gateway=192.168.1.1
# --ipv6 --subnet=2001:470:1f07:532::/64 --gateway=2001:470:1f07:532::1 -o parent=eno1 macnet
#  - name: Create a network
#    docker_network:
#      name: macnet
#      driver: macvlan

  - name: "Launch Pi-Hole container"
    docker_container:
      name: pihole
      hostname: pi.hole
      state: started
      pull: true
      restart_policy: unless-stopped
      image: diginc/pi-hole
      purge_networks: yes
      networks:
        - name: macnet
          ipv4_address: 192.168.1.5
          ipv6_address: 2001:470:1f07:532::5
      env:
        TZ: America/New_York
        ServerIP: 192.168.1.5
        ServerIPv6: 2001:470:1f07:532::5
        WEBPASSWORD: password
        INTERFACE: eth0
      volumes:
        - "pihole-config:/etc/pihole/"
        - "pihole-dnsmasqd:/etc/dnsmasq.d/"
